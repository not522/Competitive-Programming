#define BOOST_TEST_MAIN
#define BOOST_TEST_DYN_LINK
#include <boost/test/unit_test.hpp>

#include "math/basic.hpp"

BOOST_AUTO_TEST_SUITE(GCD)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(gcd( 0,  0),  0);
  BOOST_CHECK_EQUAL(gcd(99,  0), 99);
  BOOST_CHECK_EQUAL(gcd( 0, 99), 99);
  BOOST_CHECK_EQUAL(gcd(21, 99),  3);
  BOOST_CHECK_EQUAL(gcd(99, 21),  3);
  BOOST_CHECK_EQUAL(gcd(33, 99), 33);
  BOOST_CHECK_EQUAL(gcd(99, 33), 33);
  BOOST_CHECK_EQUAL(gcd(36, 99),  9);
  BOOST_CHECK_EQUAL(gcd(99, 36),  9);
  BOOST_CHECK_EQUAL(gcd(64, 24),  8);
  BOOST_CHECK_EQUAL(gcd(24, 64),  8);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(LCM)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(lcm(21, 99), 693);
  BOOST_CHECK_EQUAL(lcm(99, 21), 693);
  BOOST_CHECK_EQUAL(lcm(33, 99),  99);
  BOOST_CHECK_EQUAL(lcm(99, 33),  99);
  BOOST_CHECK_EQUAL(lcm(36, 99), 396);
  BOOST_CHECK_EQUAL(lcm(99, 36), 396);
  BOOST_CHECK_EQUAL(lcm(64, 24), 192);
  BOOST_CHECK_EQUAL(lcm(24, 64), 192);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(FLOOR)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(floor( 2,  2),  1);
  BOOST_CHECK_EQUAL(floor( 2, -2), -1);
  BOOST_CHECK_EQUAL(floor(-2,  2), -1);
  BOOST_CHECK_EQUAL(floor(-2, -2),  1);
  BOOST_CHECK_EQUAL(floor( 2,  3),  0);
  BOOST_CHECK_EQUAL(floor( 2, -3), -1);
  BOOST_CHECK_EQUAL(floor(-2,  3), -1);
  BOOST_CHECK_EQUAL(floor(-2, -3),  0);
  BOOST_CHECK_EQUAL(floor( 3,  2),  1);
  BOOST_CHECK_EQUAL(floor( 3, -2), -2);
  BOOST_CHECK_EQUAL(floor(-3,  2), -2);
  BOOST_CHECK_EQUAL(floor(-3, -2),  1);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(CEIL)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(ceil( 2,  2),  1);
  BOOST_CHECK_EQUAL(ceil( 2, -2), -1);
  BOOST_CHECK_EQUAL(ceil(-2,  2), -1);
  BOOST_CHECK_EQUAL(ceil(-2, -2),  1);
  BOOST_CHECK_EQUAL(ceil( 2,  3),  1);
  BOOST_CHECK_EQUAL(ceil( 2, -3),  0);
  BOOST_CHECK_EQUAL(ceil(-2,  3),  0);
  BOOST_CHECK_EQUAL(ceil(-2, -3),  1);
  BOOST_CHECK_EQUAL(ceil( 3,  2),  2);
  BOOST_CHECK_EQUAL(ceil( 3, -2), -1);
  BOOST_CHECK_EQUAL(ceil(-3,  2), -1);
  BOOST_CHECK_EQUAL(ceil(-3, -2),  2);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(ROUND)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(round( 2,  2),  1);
  BOOST_CHECK_EQUAL(round( 2, -2), -1);
  BOOST_CHECK_EQUAL(round(-2,  2), -1);
  BOOST_CHECK_EQUAL(round(-2, -2),  1);
  BOOST_CHECK_EQUAL(round( 2,  3),  1);
  BOOST_CHECK_EQUAL(round( 2, -3), -1);
  BOOST_CHECK_EQUAL(round(-2,  3), -1);
  BOOST_CHECK_EQUAL(round(-2, -3),  1);
  BOOST_CHECK_EQUAL(round( 3,  2),  2);
  BOOST_CHECK_EQUAL(round( 3, -2), -1);
  BOOST_CHECK_EQUAL(round(-3,  2), -1);
  BOOST_CHECK_EQUAL(round(-3, -2),  2);
  BOOST_CHECK_EQUAL(round( 4,  3),  1);
  BOOST_CHECK_EQUAL(round( 4, -3), -1);
  BOOST_CHECK_EQUAL(round(-4,  3), -1);
  BOOST_CHECK_EQUAL(round(-4, -3),  1);
  BOOST_CHECK_EQUAL(round( 3,  4),  1);
  BOOST_CHECK_EQUAL(round( 3, -4), -1);
  BOOST_CHECK_EQUAL(round(-3,  4), -1);
  BOOST_CHECK_EQUAL(round(-3, -4),  1);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(MOD)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(mod( 2,  2), 0);
  BOOST_CHECK_EQUAL(mod( 2, -2), 0);
  BOOST_CHECK_EQUAL(mod(-2,  2), 0);
  BOOST_CHECK_EQUAL(mod(-2, -2), 0);
  BOOST_CHECK_EQUAL(mod( 2,  3), 2);
  BOOST_CHECK_EQUAL(mod( 2, -3), 2);
  BOOST_CHECK_EQUAL(mod(-2,  3), 1);
  BOOST_CHECK_EQUAL(mod(-2, -3), 1);
  BOOST_CHECK_EQUAL(mod( 3,  2), 1);
  BOOST_CHECK_EQUAL(mod( 3, -2), 1);
  BOOST_CHECK_EQUAL(mod(-3,  2), 1);
  BOOST_CHECK_EQUAL(mod(-3, -2), 1);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(FACTORIAL)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(factorial(0), 1);
  BOOST_CHECK_EQUAL(factorial(1), 1);
  BOOST_CHECK_EQUAL(factorial(2), 2);
  BOOST_CHECK_EQUAL(factorial(3), 6);
  BOOST_CHECK_EQUAL(factorial(4), 24);
  BOOST_CHECK_EQUAL(factorial(10), 3628800);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(SQUARE)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(square(0), 0);
  BOOST_CHECK_EQUAL(square(1), 1);
  BOOST_CHECK_EQUAL(square(-1), 1);
  BOOST_CHECK_EQUAL(square(10), 100);
  BOOST_CHECK_EQUAL(square(-10), 100);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(CUBE)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(cube(0), 0);
  BOOST_CHECK_EQUAL(cube(1), 1);
  BOOST_CHECK_EQUAL(cube(-1), -1);
  BOOST_CHECK_EQUAL(cube(10), 1000);
  BOOST_CHECK_EQUAL(cube(-10), -1000);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(NORM)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(norm(0, 0, 0, 0), 0);
  BOOST_CHECK_EQUAL(norm(0, 0, 1, 1), 2);
  BOOST_CHECK_EQUAL(norm(0, 0, -1, -1), 2);
  BOOST_CHECK_EQUAL(norm(-100, 100, 100, -100), 80000);
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(IS_SQUARE)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK(isSquare(0));
  BOOST_CHECK(isSquare(1));
  BOOST_CHECK(isSquare(100000000));
  BOOST_CHECK(!isSquare(2));
  BOOST_CHECK(!isSquare(100000001));
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(CLAMP)
BOOST_AUTO_TEST_CASE(HAND) {
  BOOST_CHECK_EQUAL(clamp(0, 1, 100), 1);
  BOOST_CHECK_EQUAL(clamp(10, 1, 100), 10);
  BOOST_CHECK_EQUAL(clamp(1000, 1, 100), 100);
  BOOST_CHECK_EQUAL(clamp(0., 1., 100.), 1.);
  BOOST_CHECK_EQUAL(clamp(10., 1., 100.), 10.);
  BOOST_CHECK_EQUAL(clamp(1000., 1., 100.), 100.);
}
BOOST_AUTO_TEST_SUITE_END()
